class SegmentTree{
    public:
    int n;
    vector<long long> segTree;
    vector<long long> lazy;
    vector<int> assignment;

    SegmentTree(vector<long long> a){
        n = a.size();
        while(__builtin_popcount(n) > 1){
            a.push_back(0LL);
            n++;
        }

        segTree = vector<long long>(2*n);
        lazy = vector<long long>(2*n,0);
        assignment = vector<int>(2*n,0);

        for(int i=n;i<2*n;i++) segTree[i] = a[i-n];

        for(int i=n-1;i>=1;i--){
            segTree[i] = segTree[2*i] + segTree[2*i + 1]; //Operation Specific
        }
    }

    void propogate(int node,int nl,int nr){
        if(assignment[node]){
            segTree[node] = (nr - nl + 1)*lazy[node]; //Operation Specific
        }
        else{
            segTree[node] = segTree[node] + lazy[node]*(nr - nl + 1); //Operation Specific
        }
        
        if(nl == nr){
            lazy[node] = 0;
            assignment[node] = 0;
            return ;
        }

        if(assignment[node]){
            lazy[2*node] = lazy[node];
            lazy[2*node + 1] = lazy[node];
            assignment[2*node] = 1;
            assignment[2*node + 1] = 1;
        }
        else{
            lazy[2*node]+=lazy[node];
            lazy[2*node + 1]+=lazy[node];
        }

        lazy[node] = 0;
        assignment[node] = 0;
    }

    void update(int node,int nl,int nr,int ql,int qr,long long x,int assignFlag = 0){
        propogate(node,nl,nr);      

        if(nl >= ql && nr <= qr){
            assignment[node] = assignFlag;
            lazy[node]+=x;
            propogate(node,nl,nr);  
            return ;
        }

        if(nl > qr || nr < ql){
            return ;
        }

        int mid = (nl + nr)>>1;

        update(2*node,nl,mid,ql,qr,x,assignFlag);
        update(2*node + 1,mid+1,nr,ql,qr,x,assignFlag);

        segTree[node] = segTree[2*node] + segTree[2*node + 1]; //Operation Specific
    }

    long long query(int node,int nl,int nr,int ql,int qr){
        propogate(node,nl,nr);

        if(nl >= ql && nr <= qr){
            return segTree[node];
        }

        if(nl > qr || nr < ql){
            return 0; //Operation Specific
        }

        int mid = (nl + nr)>>1;

        return query(2*node,nl,mid,ql,qr) + query(2*node + 1,mid+1,nr,ql,qr); //Operation Specific
    }

    long long query(int l,int r){
        return query(1,0,n-1,l,r);
    }

    void update(int index,long long x){
        update(1,0,n-1,index,index,x);
    }

    void updateRange(int l,int r,long long x){
        update(1,0,n-1,l,r,x);
    }

    void assignRange(int l,int r,long long x){
        update(1,0,n-1,l,r,x,1);
    }
};
